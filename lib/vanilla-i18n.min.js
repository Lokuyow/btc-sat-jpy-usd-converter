"use strict"; const MSG_LEVELS = ["DEBUG", "INFO", "WARN", "ERROR"], DEFAULT_i18n_DATA_ATTR = "vanilla-i18n", DEFAULT_i18n_DIR = "assets/vanilla-i18n", DEFAULT_LANG_TOGGLER_ID = "vanilla-i18n-toggler"; class vanilla_i18n {
    constructor(a, b) { this._languages = a, this._path = this._sanitizePath(b.path || DEFAULT_i18n_DIR), this._debug = b.debug || !1, this._i18nDataAttr = b.i18n_attr_name || DEFAULT_i18n_DATA_ATTR, this._localStorageKey = this._generateKeyFromHost(), this._togglerID = b.toggler_id || DEFAULT_LANG_TOGGLER_ID, b.default_language || (b.default_language = this._languages[0]), this._initializeLanguage(b.default_language), document.addEventListener("DOMContentLoaded", () => { this._attachOnChangeToi18nToggler(this._togglerID) }) }

    _initializeLanguage(defaultLanguage) {
        const savedLanguage = this._getLanguage();
        if (!savedLanguage) {
            // ローカルストレージに言語設定がない場合
            const browserLanguage = navigator.language || navigator.userLanguage; // ブラウザの言語を取得
            let matchedLanguage;

            // ja-JP の場合は "日本語" を設定、それ以外はデフォルト言語
            if (browserLanguage === "ja-JP") {
                matchedLanguage = "日本語";
            } else {
                matchedLanguage = defaultLanguage;
            }

            this._setSavedLanguage(matchedLanguage);
            this._printMsg(`No saved language found, setting browser language or default: ${matchedLanguage}`, MSG_LEVELS[2]);
        }
    }

    async run() { const a = this._getLanguage(); if (a && !this._languages.includes(a)) return void this._printMsg(`unsupported ${a} language found in local storage, supported languages are ${this._languages}`, MSG_LEVELS[3]); if (!a) return void this._printMsg(`no set language found, default language will be used`, MSG_LEVELS[2]); document.addEventListener("DOMContentLoaded", () => { this._setTogglerValue(a, this._togglerID) }); const b = await this._loadLangFile(a); if (!b) return void this._printMsg(`failed to load translation file for ${a}`, MSG_LEVELS[3]); const c = this._getElementsForTranslation(); return c ? void (this._translate(c, b), this._printMsg(`translation to ${a} finished for ${c.length} elements`, MSG_LEVELS[0])) : void this._printMsg(`no element found for translating`, MSG_LEVELS[2]) } _runOnChange(a) { if (!this._languages.includes(a)) return void this._printMsg(`${a} is not supported, supported languages are ${this._languages}`, MSG_LEVELS[3]); const b = this._getLanguage(); a == b ? this._printMsg(`selected language is same as current language`, MSG_LEVELS[0]) : (this._printMsg(`switching to ${a} from ${b}`, MSG_LEVELS[1]), this._setSavedLanguage(a), this.run()) } _attachOnChangeToi18nToggler(a) { const b = document.getElementById(a); b ? b.addEventListener("change", a => { this._runOnChange(a.target.value) }) : this._printMsg(`no language toggler found with id "${a}" for attaching onChange event`, MSG_LEVELS[2]) } _setTogglerValue(a, b) { const c = document.getElementById(b); c ? (c.value = a, c.dispatchEvent(new Event("change"))) : this._printMsg(`no language toggler found with id "${b}" for setting value`, MSG_LEVELS[2]) } _translate(a, b = void 0) { b && a.forEach(a => { var c = a.getAttribute(this._i18nDataAttr).split("."), d = c.reduce((a, b) => a[b], b); d && (a.innerHTML = d) }) } _getElementsForTranslation() { return document.querySelectorAll("[" + this._i18nDataAttr + "]") } async _loadLangFile(a = void 0) { if (a) { const c = `/${this._path}/${a}.json`; try { var b = await fetch(c); return b.json() } catch { } } } _getLanguage() { var a = this._getSavedLanguage(); return a || this._printMsg("no saved language found, default language will load", MSG_LEVELS[0]), a } _getSavedLanguage() { return window.localStorage.getItem(this._localStorageKey) } _setSavedLanguage(a) { a && window.localStorage.setItem(this._localStorageKey, a) } _generateKeyFromHost() { return window.location.host + "-vanilla-i18n" } _sanitizePath(a) { return a = a.trim(), "/" === a[0] && (a = a.slice(1, a.length)), "/" === a[a.length - 1] && (a = a.slice(0, -1)), a } _printMsg(a, b) { (b !== MSG_LEVELS[0] || this._debug) && console.info("vanilla-i18n | " + b + ":" + a) }
}

/*
 * Original library: vanilla-i18n
 * Original copyright (c) 2020 Shivam Kumar Jha
 * Modified by Lokuyow in 2024
 *
 * This code has been modified from the original version.
 *
 * MIT License
 * 
 * Copyright (c) 2020 Shivam Kumar Jha
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
